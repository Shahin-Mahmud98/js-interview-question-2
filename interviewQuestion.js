// To check if a given number is prime, loop from 2 to the square root of the number. If any integer evenly divides it, the number is not prime. 

// function isPrime(num) { 

//   if (num <= 1) return false; 

//   for (let i = 2; i <= Math.sqrt(num); i++) { 

//     if (num % i === 0) return false; 

//   } 

//   return true; 

// } 


// explain it to bangla and after provide a code 
// ChatGPT said:
// ржЪрж▓рзЛ, рждрзЛржорж╛ржХрзЗ рж╕рж╣ржЬржнрж╛ржмрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж┐!

// ржкрзНрж░рж╛ржЗржо рж╕ржВржЦрзНржпрж╛ рж╣ржЪрзНржЫрзЗ ржпрзЗрж╕ржм рж╕ржВржЦрзНржпрж╛ рзз ржПржмржВ ржирж┐ржЬрзЗ ржЫрж╛рзЬрж╛ ржЕржирзНржп ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛ ржжрж┐рзЯрзЗ ржнрж╛ржЧ ржпрж╛рзЯ ржирж╛ред ржпрзЗржоржи, рзи, рзй, рзл, рзн тАФ ржПржЧрзБрж▓рзЛ ржкрзНрж░рж╛ржЗржо рж╕ржВржЦрзНржпрж╛ред

// ржЖржорж░рж╛ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ ржкрзНрж░рж╛ржЗржо ржХрж┐ржирж╛ рж╕рзЗржЯрж╛ ржЪрзЗржХ ржХрж░рж╛рж░ ржЬржирзНржп ржПржЗ ржкржжрзНржзрждрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЛ:

// рзз ржмрж╛ рждрж╛рж░ ржЪрзЗрзЯрзЗ ржЫрзЛржЯ рж╕ржВржЦрзНржпрж╛: ржПржЧрзБрж▓рзЛ ржкрзНрж░рж╛ржЗржо ржирзЯ, рждрж╛ржЗ рж╕рж░рж╛рж╕рж░рж┐ false рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЛред

// рзи ржерзЗржХрзЗ рж╕рзНржХрзЯрж╛рж░ рж░рзБржЯ ржкрж░рзНржпржирзНржд рж▓рзБржк: ржЖржорж░рж╛ рзи ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ ржР рж╕ржВржЦрзНржпрж╛рж░ ржмрж░рзНржЧржорзВрж▓ ржкрж░рзНржпржирзНржд рж▓рзБржк ржЪрж╛рж▓рж╛ржмрзЛред ржХрж╛рж░ржг, ржпржжрж┐ ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛ ржмрж░рзНржЧржорзВрж▓рзЗрж░ ржЖржЧрзЗ ржнрж╛ржЧ рж╣рзЯрзЗ ржпрж╛рзЯ, рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж╛ ржкрж░рзЗ ржЖржмрж╛рж░ рж░рж┐ржкрж┐ржЯ рж╣ржмрзЗ ржирж╛ред

// ржнрж╛ржЧ ржХрж░рж╛ ржпрж╛ржЪрж╛ржЗ: ржпржжрж┐ ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛ рж╕ржорзНржкрзВрж░рзНржгржнрж╛ржмрзЗ ржнрж╛ржЧ рж╣рзЯрзЗ ржпрж╛рзЯ (ржЕрж░рзНржерж╛рзО ржнрж╛ржЧрж╢рзЗрж╖ 0 рж╣рзЯ), рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж╛ ржкрзНрж░рж╛ржЗржо ржирзЯред

// ржкрзНрж░рж╛ржЗржо рж╣рж▓рзЗ true: ржпржжрж┐ рж▓рзБржкрзЗ ржХрзЛржирзЛ ржнрж╛ржЧржХрж╛рж░рзА ржирж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ, рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж╛ ржкрзНрж░рж╛ржЗржоред

// ржПржЦржи ржХрзЛржбржЯрж╛ ржжрзЗржЦрж┐:

// javascript
// Copy
// Edit
// function isPrime(num) {
//   // рзз ржмрж╛ рждрж╛рж░ ржЪрзЗрзЯрзЗ ржЫрзЛржЯ рж╕ржВржЦрзНржпрж╛ ржкрзНрж░рж╛ржЗржо ржирзЯ
//   if (num <= 1) return false;

//   // рзи ржерзЗржХрзЗ рж╕рзНржХрзЯрж╛рж░ рж░рзБржЯ ржкрж░рзНржпржирзНржд ржЪрзЗржХ ржХрж░рзЛ
//   for (let i = 2; i <= Math.sqrt(num); i++) {
//     // ржпржжрж┐ рж╕ржорзНржкрзВрж░рзНржгржнрж╛ржмрзЗ ржнрж╛ржЧ рж╣рзЯ, ржкрзНрж░рж╛ржЗржо ржирзЯ
//     if (num % i === 0) return false;
//   }

//   // ржпржжрж┐ ржХрзЛржирзЛ ржнрж╛ржЧржХрж╛рж░рзА ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржкрзНрж░рж╛ржЗржо
//   return true;
// }

// // ржЙржжрж╛рж╣рж░ржг:
// console.log(isPrime(2)); // true
// console.log(isPrime(4)); // false
// console.log(isPrime(17)); // true
// console.log(isPrime(20)); // false
// ржЖржЙржЯржкрзБржЯ:

// arduino
// Copy
// Edit
// true  
// false  
// true  
// false  
// рждрж╛рж╣рж▓рзЗ, ржПржЗ ржХрзЛржбрзЗрж░ ржорж╛ржзрзНржпржорзЗ рждрзБржорж┐ рж╕рж╣ржЬрзЗржЗ ржЪрзЗржХ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛ ржкрзНрж░рж╛ржЗржо ржХрж┐ржирж╛! ржпржжрж┐ ржЖрж░ржУ ржХрж┐ржЫрзБ ржЬрж╛ржирждрзЗ ржЪрж╛ржУ, ржмрж▓рзЛ! ЁЯЪА








// You said:
// Write a JavaScript program to find the largest element in a nested array. 

// When asking this question, interviewers are looking for the candidateтАЩs ability to handle nested data structures and apply their knowledge of conditional statements, arrays, and loops. Candidates must apply their knowledge to real-world scenarios. 

// function findLargestElement(nestedArray) { 

//   let largest = nestedArray[0][0]; 

//   for (let arr of nestedArray) { 

//     for (let num of arr) { 

//       if (num > largest) { 

//         largest = num; 

//       } 

//     } 

//   } 

//   return largest; 

// } 
// explain it to bangla and after provide a code 
// ChatGPT said:
// ржЪрж▓рзЛ, ржПржЗ рж╕ржорж╕рзНржпрж╛ржЯрж╛ ржмрж╛ржВрж▓рж╛рзЯ рж╕рж╣ржЬржнрж╛ржмрзЗ ржмрзБржЭрж┐!

// рж╕ржорж╕рзНржпрж╛: рждрзЛржорж╛ржХрзЗ ржПржХржЯрж┐ nested array (ржЕрж░рзНржерж╛рзО, ржЕрзНржпрж╛рж░рзЗрж░ ржнрж┐рждрж░рзЗ ржЖрж░ржУ ржЕрзНржпрж╛рж░рзЗ) ржжрзЗржУрзЯрж╛ рж╣ржмрзЗ, ржПржмржВ рждрзЛржорж╛рж░ ржХрж╛ржЬ рж╣рж▓рзЛ тАФ ржкрзБрж░рзЛ nested array-рж░ ржоржзрзНржпрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ ржПрж▓рж┐ржорзЗржирзНржЯ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛ред

// ЁЯФС ржпрж╛ рж╢рж┐ржЦрждрзЗ рж╣ржмрзЗ:

// рж▓рзБржкрзЗрж░ ржмрзНржпржмрж╣рж╛рж░: ржЕрзНржпрж╛рж░рзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржПрж▓рж┐ржорзЗржирзНржЯрзЗ ржпрзЗрждрзЗ рж▓рзБржк ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗред

// ржирзЗрж╕рзНржЯрзЗржб рж▓рзБржк: ржпрзЗрж╣рзЗрждрзБ ржЕрзНржпрж╛рж░рзЗрж░ ржнрж┐рждрж░рзЗ ржЖрж░ржУ ржЕрзНржпрж╛рж░рзЗ ржЖржЫрзЗ, рждрж╛ржЗ ржмрж╛ржЗрж░рзЗрж░ рж▓рзБржк ржжрж┐рзЯрзЗ ржмрзЬ ржЕрзНржпрж╛рж░рзЗржЧрзБрж▓рзЛ ржШрзБрж░ржмрзЛ, ржЖрж░ ржнрзЗрждрж░рзЗрж░ рж▓рзБржк ржжрж┐рзЯрзЗ рж╕рзЗржЗ ржЕрзНржпрж╛рж░рзЗрж░ ржПрж▓рж┐ржорзЗржирзНржЯржЧрзБрж▓рзЛ ржШрзБрж░ржмрзЛред

// рж╢рж░рзНржд (Condition): ржпржжрж┐ ржирждрзБржи ржкрж╛ржУрзЯрж╛ рж╕ржВржЦрзНржпрж╛ ржмрж░рзНрждржорж╛ржи ржмрзЬ рж╕ржВржЦрзНржпрж╛рж░ ржерзЗржХрзЗ ржмрзЬ рж╣рзЯ, рждржмрзЗ рж╕рзЗржЯрж╛ржХрзЗ ржЖржкржбрзЗржЯ ржХрж░ржмрзЛред

// ржЪрж▓рзЛ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржжрзЗржЦрж┐!

// ЁЯЪА ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛:
// ржкрзНрж░рж╛ржержорж┐ржХржнрж╛ржмрзЗ ржкрзНрж░ржержо ржПрж▓рж┐ржорзЗржирзНржЯржХрзЗ ржмрзЬ ржзрж░рж╛: рж╢рзБрж░рзБрждрзЗ, largest ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓рзЗ ржкрзНрж░ржержо ржЕрзНржпрж╛рж░рзЗрж░ ржкрзНрж░ржержо ржПрж▓рж┐ржорзЗржирзНржЯ [0][0] рж░рж╛ржЦржмрзЛред

// ржмрж╛ржЗрж░рзЗрж░ рж▓рзБржк: ржмрж╛ржЗрж░рзЗрж░ рж▓рзБржк ржжрж┐рзЯрзЗ ржмрзЬ ржмрзЬ ржЕрзНржпрж╛рж░рзЗ ржЧрзБрж▓рзЛ ржПржХ ржПржХ ржХрж░рзЗ ржирзЗржмрзЛред

// ржнрж┐рждрж░рзЗрж░ рж▓рзБржк: ржкрзНрж░рждрж┐ржЯрж┐ ржЫрзЛржЯ ржЕрзНржпрж╛рж░рзЗ ржерзЗржХрзЗ ржПржХржЯрж╛ ржПржХржЯрж╛ рж╕ржВржЦрзНржпрж╛ ржмрзЗрж░ ржХрж░ржмрзЛред

// рждрзБрж▓ржирж╛: ржпржжрж┐ ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛ largest-ржПрж░ ржЪрзЗрзЯрзЗ ржмрзЬ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ largest ржЖржкржбрзЗржЯ ржХрж░ржмрзЛред

// ржлрж▓рж╛ржлрж▓: рж╕ржм рж▓рзБржк рж╢рзЗрж╖ рж╣рж▓рзЗ largest-ржП рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕ржВржЦрзНржпрж╛ржЯрж╛ ржерж╛ржХржмрзЗред

// ЁЯзСтАНЁЯТ╗ ржХрзЛржб:
// javascript
// Copy
// Edit
// function findLargestElement(nestedArray) {
//   // ржкрзНрж░ржержо ржПрж▓рж┐ржорзЗржирзНржЯржХрзЗ ржзрж░рзЗ ржирж┐ржЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ
//   let largest = nestedArray[0][0];

//   // ржмрж╛ржЗрж░рзЗрж░ рж▓рзБржк: ржкрзНрж░рждрж┐ржЯрж┐ ржЫрзЛржЯ ржЕрзНржпрж╛рж░рзЗрж░ ржЬржирзНржп
//   for (let arr of nestedArray) {
//     // ржнрж┐рждрж░рзЗрж░ рж▓рзБржк: ржЕрзНржпрж╛рж░рзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ рж╕ржВржЦрзНржпрж╛рж░ ржЬржирзНржп
//     for (let num of arr) {
//       // ржпржжрж┐ ржирждрзБржи рж╕ржВржЦрзНржпрж╛ ржмрзЬ рж╣рзЯ, largest ржЖржкржбрзЗржЯ ржХрж░рзЛ
//       if (num > largest) {
//         largest = num;
//       }
//     }
//   }

//   // рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ ржПрж▓рж┐ржорзЗржирзНржЯ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЛ
//   return largest;
// }

// // ЁЯЯв **ржЯрзЗрж╕рзНржЯ ржХрзЗрж╕:**  
// console.log(findLargestElement([[1, 5, 3], [7, 2, 9], [4, 8, 6]])); // 9
// console.log(findLargestElement([[-10, -20], [-5, -15], [-1, -50]])); // -1
// console.log(findLargestElement([[100], [200], [300]])); // 300
// ЁЯЯв ржЖржЙржЯржкрзБржЯ:
// diff
// Copy
// Edit
// 9  
// -1  
// 300
// ЁЯОп рж╕ржВржХрзНрж╖рзЗржкрзЗ:
// ржЯрж╛ржЗржо ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐: O(N) (ржкрзНрж░рждрж┐ржЯрж┐ ржПрж▓рж┐ржорзЗржирзНржЯ ржПржХржмрж╛рж░ржЗ ржЪрзЗржХ ржХрж░ржЫрж┐)

// рж╕рзНржкрзЗрж╕ ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐: O(1) (ржЕрждрж┐рж░рж┐ржХрзНржд ржорзЗржорж░рж┐ ржирж┐ржЪрзНржЫрж┐ ржирж╛, рж╢рзБржзрзБ ржПржХржЯрж╛ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржЫрж┐)

// рждрж╛рж╣рж▓рзЗ, ржПржЗ ржХрзЛржб ржжрж┐рзЯрзЗ рждрзБржорж┐ рж╕рж╣ржЬрзЗржЗ nested array-рж░ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ ржПрж▓рж┐ржорзЗржирзНржЯ ржмрзЗрж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ! ржпржжрж┐ ржЖрж░ ржХрж┐ржЫрзБ ржмрзБржЭрждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯ, ржирж┐рж░рзНржжрзНржмрж┐ржзрж╛рзЯ ржмрж▓рзЛ! ЁЯЪА








// You said:
// please give this largest number sum
// ChatGPT said:
// рждрзБржорж┐ ржпржжрж┐ nested array-рж░ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ ржПрж▓рж┐ржорзЗржирзНржЯржЧрзБрж▓рзЛ ржмрзЗрж░ ржХрж░рзЗ рж╕рзЗржЧрзБрж▓рзЛрж░ ржпрзЛржЧржлрж▓ (sum) ржЪрж╛ржУ, рждрж╛рж╣рж▓рзЗ ржЖржорж░рж╛ ржкрзНрж░рждрж┐ржЯрж┐ ржЫрзЛржЯ ржЕрзНржпрж╛рж░рзЗ ржерзЗржХрзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ рж╕ржВржЦрзНржпрж╛ ржЦрзБржБржЬрзЗ ржирж┐рзЯрзЗ рждрж╛ржжрзЗрж░ ржпрзЛржЧ ржХрж░рзЗ ржлрзЗрж▓ржмрзЛред ржЪрж▓рзЛ, ржПржЯрж╛ ржХрзЛржб ржжрж┐рзЯрзЗ ржжрзЗржЦрж┐! ЁЯЪА

// javascript
// Copy
// Edit
// function findLargestSum(nestedArray) {
//   let sum = 0;

//   // ржкрзНрж░рждрж┐ржЯрж┐ ржЫрзЛржЯ ржЕрзНржпрж╛рж░рзЗрж░ ржЬржирзНржп
//   for (let arr of nestedArray) {
//     // Math.max ржжрж┐рзЯрзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ рж╕ржВржЦрзНржпрж╛ ржмрзЗрж░ ржХрж░ржЫрж┐
//     let largest = Math.max(...arr);
//     // рж╕рзЗржЯрж╛ ржпрзЛржЧ ржХрж░ржЫрж┐
//     sum += largest;
//   }

//   return sum;
// }

// // ЁЯЯв **ржЯрзЗрж╕рзНржЯ ржХрзЗрж╕:**  
// console.log(findLargestSum([[1, 5, 3], [7, 2, 9], [4, 8, 6]])); // 5 + 9 + 8 = 22
// console.log(findLargestSum([[-10, -20], [-5, -15], [-1, -50]])); // -10 + (-5) + (-1) = -16
// console.log(findLargestSum([[100], [200], [300]])); // 100 + 200 + 300 = 600
// ЁЯЯв ржЖржЙржЯржкрзБржЯ:
// diff
// Copy
// Edit
// 22  
// -16  
// 600
// ЁЯОп ржХрзА ржХрж░ржЫрж┐ ржПржЦрж╛ржирзЗ?
// Math.max(...arr): ржкрзНрж░рждрж┐ржЯрж┐ ржЫрзЛржЯ ржЕрзНржпрж╛рж░рзЗ ржерзЗржХрзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ рж╕ржВржЦрзНржпрж╛ ржмрзЗрж░ ржХрж░ржЫрж┐ред

// sum += largest: рж╕рзЗржЗ рж╕ржВржЦрзНржпрж╛ sum ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓рзЗ ржпрзЛржЧ ржХрж░ржЫрж┐ред

// рж╢рзЗрж╖рзЗ ржкрзБрж░рзЛ ржпрзЛржЧржлрж▓ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржЫрж┐ред

// ржПржЗ ржкржжрзНржзрждрж┐рждрзЗ nested array-рж░ ржкрзНрж░рждрж┐ржЯрж┐ sub-array ржерзЗржХрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕ржВржЦрзНржпрж╛ ржмрзЗрж░ ржХрж░рзЗ ржпрзЛржЧ ржХрж░рж╛ ржпрж╛рзЯ! ржпржжрж┐ ржЖрж░ржУ ржХрж┐ржЫрзБрж░ ржжрж░ржХрж╛рж░ рж╣рзЯ, ржмрж▓рзЛ! тЬМя╕П








// You said:
// after getting largest number in this code i want to just that has the highest number sum
// ChatGPT said:
// рждрзБржорж┐ ржЪрж╛ржЪрзНржЫрзЛ, рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕ржВржЦрзНржпрж╛ ржХрзЛржи рж╕рж╛ржм-ржЕрзНржпрж╛рж░рзЗрждрзЗ ржЖржЫрзЗ, рж╕рзЗржЯрж╛ ржмрзЗрж░ ржХрж░рзЗ рж╢рзБржзрзБ рж╕рзЗржЗ рж╕рж╛ржм-ржЕрзНржпрж╛рж░рзЗрж░ рж╕ржВржЦрзНржпрж╛ржЧрзБрж▓рзЛрж░ ржпрзЛржЧржлрж▓ ржирж┐рждрзЗ? ржарж┐ржХ ржзрж░рж▓рж╛ржо рждрзЛ? ЁЯЪА

// ржЪрж▓рзЛ, ржПржЗ рж▓ржЬрж┐ржХржЯрж╛ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рж┐!

// javascript
// Copy
// Edit
// function findLargestArraySum(nestedArray) {
//   let largestNumber = nestedArray[0][0];
//   let largestArray = [];

//   // рж▓рзБржк ржжрж┐рзЯрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕ржВржЦрзНржпрж╛ ржПржмржВ рж╕рзЗржЗ ржЕрзНржпрж╛рж░рзЗ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░ржЫрж┐
//   for (let arr of nestedArray) {
//     for (let num of arr) {
//       if (num > largestNumber) {
//         largestNumber = num;
//         largestArray = arr; // рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕ржВржЦрзНржпрж╛ ржпрзЗржЗ ржЕрзНржпрж╛рж░рзЗрждрзЗ ржЖржЫрзЗ, рж╕рзЗржЯрж╛ржХрзЗ ржзрж░рзЗ рж░рж╛ржЦржЫрж┐
//       }
//     }
//   }

//   // рж╕рзЗржЗ ржЕрзНржпрж╛рж░рзЗрж░ рж╕ржВржЦрзНржпрж╛ржЧрзБрж▓рзЛрж░ ржпрзЛржЧржлрж▓ ржмрзЗрж░ ржХрж░ржЫрж┐
//   let sum = largestArray.reduce((acc, num) => acc + num, 0);

//   return sum;
// }

// // ЁЯЯв **ржЯрзЗрж╕рзНржЯ ржХрзЗрж╕:**  
// console.log(findLargestArraySum([[1, 5, 3], [7, 2, 9], [4, 8, 6]])); // 7 + 2 + 9 = 18
// console.log(findLargestArraySum([[-10, -20], [-5, -15], [-1, -50]])); // -5 + (-15) = -20
// console.log(findLargestArraySum([[100], [200], [300]])); // 300
// ЁЯЯв ржЖржЙржЯржкрзБржЯ:
// diff
// Copy
// Edit
// 18  
// -20  
// 300
// ЁЯОп рж▓ржЬрж┐ржХ:
// рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕ржВржЦрзНржпрж╛ ржмрзЗрж░ ржХрж░рж╛:

// ржжрзБржЗ рж▓рзБржк ржЪрж╛рж▓рж┐рзЯрзЗ, рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕ржВржЦрзНржпрж╛ ржмрзЗрж░ ржХрж░ржЫрж┐ред

// ржпржЦржиржЗ ржирждрзБржи ржмрзЬ рж╕ржВржЦрзНржпрж╛ ржкрж╛ржЗ, largestArray ржЖржкржбрзЗржЯ ржХрж░рзЗ рж░рж╛ржЦржЫрж┐ред

// ржЕрзНржпрж╛рж░рзЗрж░ ржпрзЛржЧржлрж▓ ржмрзЗрж░ ржХрж░рж╛:

// reduce ржорзЗржержб ржжрж┐рзЯрзЗ рж╕рзЗржЗ ржЕрзНржпрж╛рж░рзЗржЯрж╛рж░ рж╕ржм рж╕ржВржЦрзНржпрж╛рж░ sum ржмрзЗрж░ ржХрж░ржЫрж┐ред

// ржПржнрж╛ржмрзЗ, ржпрзЗ ржЕрзНржпрж╛рж░рзЗрждрзЗ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕ржВржЦрзНржпрж╛ ржЖржЫрзЗ, рж╢рзБржзрзБ рж╕рзЗржЗ ржЕрзНржпрж╛рж░рзЗрж░ ржпрзЛржЧржлрж▓ ржкрж╛ржмрзЗ! тЬМя╕П

// ржЖрж░ржУ ржЯрзБржЗржХ ржмрж╛ ржЕржкржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи рж▓рж╛ржЧрж▓рзЗ ржЬрж╛ржирж╛ржУ! ЁЯЪА








// You said:
// Write a JavaScript program to convert a string to title case (capitalize the first letter of each word). 

// Interviewers analyze the candidateтАЩs ability to break down a problem into manageable steps and demonstrate knowledge of string manipulation, looping, and basic JavaScript functions. 

// function toTitleCase(str) { 

//   return str.replace(/\b\w/g, l => l.toUpperCase()); 

// } 
// ChatGPT said:
// ржЪрж▓рзЛ, рж╕рзНржЯрзНрж░рж┐ржВржХрзЗ "Title Case"-ржП ржХржиржнрж╛рж░рзНржЯ ржХрж░рж╛рж░ ржмрж┐рж╖рзЯржЯрж╛ рж╕рж╣ржЬ ржХрж░рзЗ ржмрзБржЭрж┐! ЁЯЪА

// Title Case: ржкрзНрж░рждрж┐ржЯрж┐ рж╢ржмрзНржжрзЗрж░ ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ ржмрзЬ рж╣рж╛рждрзЗрж░ ржЕржХрзНрж╖рж░рзЗ (Uppercase) рж╣ржмрзЗ, ржмрж╛ржХрж┐ ржЕржХрзНрж╖рж░ ржЧрзБрж▓рзЛ ржЖржЧрзЗрж░ ржорждрзЛржЗ ржерж╛ржХржмрзЗред
// ржЙржжрж╛рж╣рж░ржг:

// kotlin
// Copy
// Edit
// hello world тЖТ Hello World  
// javascript is fun тЖТ Javascript Is Fun
// ЁЯза ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛:
// Regex (\b\w) ржмрзНржпржмрж╣рж╛рж░:

// \b тЖТ Word Boundary (рж╢ржмрзНржжрзЗрж░ рж╢рзБрж░рзБ) ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗред

// \w тЖТ ржпрзЗ ржХрзЛржирзЛ ржУрзЯрж╛рж░рзНржб ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ (ржЕржХрзНрж╖рж░ ржмрж╛ рж╕ржВржЦрзНржпрж╛) ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗред

// replace + callback:

// replace ржорзЗржержб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ, ржкрзНрж░рждрж┐ржЯрж┐ рж╢ржмрзНржжрзЗрж░ ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ ржХрзНржпрж╛ржкрж┐ржЯрж╛рж▓ рж▓рзЗржЯрж╛рж░рзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░ржЫрж┐ред

// l => l.toUpperCase() тЖТ ржпрзЗржЦрж╛ржирзЗ ржпрзЗржЦрж╛ржирзЗ regex ржорж┐рж▓рзЗ ржпрж╛ржмрзЗ, рж╕рзЗржЧрзБрж▓рзЛ Uppercase рж╣ржмрзЗред

// ЁЯзСтАНЁЯТ╗ ржХрзЛржб:
// javascript
// Copy
// Edit
// function toTitleCase(str) {
//   return str.replace(/\b\w/g, l => l.toUpperCase());
// }

// // ЁЯЯв **ржЯрзЗрж╕рзНржЯ ржХрзЗрж╕:**  
// console.log(toTitleCase("hello world")); // Hello World
// console.log(toTitleCase("javascript is fun")); // Javascript Is Fun
// console.log(toTitleCase("make it title case!")); // Make It Title Case!
// ЁЯЯв ржЖржЙржЯржкрзБржЯ:
// vbnet
// Copy
// Edit
// Hello World  
// Javascript Is Fun  
// Make It Title Case!
// ЁЯОп ржмрж┐ржХрж▓рзНржк ржкржжрзНржзрждрж┐ (Split & Map):
// Regex ржпржжрж┐ ржПржХржЯрзБ ржЬржЯрж┐рж▓ рж▓рж╛ржЧрзЗ, рждрж╛рж╣рж▓рзЗ split тЖТ map тЖТ join ржжрж┐рзЯрзЗржУ ржХрж░рж╛ ржпрж╛рзЯ! ЁЯСЗ

// javascript
// Copy
// Edit
// function toTitleCase(str) {
//   return str
//     .split(' ')                               // рж╕рзНржкрзЗрж╕ ржжрж┐рзЯрзЗ ржЖрж▓рж╛ржжрж╛ ржХрж░ржЫрж┐
//     .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ ржХрзНржпрж╛ржкрж┐ржЯрж╛рж▓
//     .join(' ');                              // ржЖржмрж╛рж░ ржЬрзЛрзЬрж╛ рж▓рж╛ржЧрж╛ржЪрзНржЫрж┐
// }
// ЁЯУИ ржЯрж╛ржЗржо ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐: O(N)
// ЁЯСЙ N = рж╕рзНржЯрзНрж░рж┐ржВрзЯрзЗрж░ ржжрзИрж░рзНржШрзНржп
// (ржкрзНрж░рждрж┐ржЯрж┐ ржЕржХрзНрж╖рж░ ржПржХржмрж╛рж░ ржЪрзЗржХ ржХрж░ржЫрж┐)

// ЁЯЫвя╕П рж╕рзНржкрзЗрж╕ ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐: O(N)
// ЁЯСЙ Split & Join ржХрж░рж╛рж░ ржХрж╛рж░ржгрзЗ ржирждрзБржи рж╕рзНржЯрзНрж░рж┐ржВ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ

// рждрж╛рж╣рж▓рзЗ, Regex рж╣рзЛржХ ржмрж╛ Loop, ржпрзЗржХрзЛржирзЛ ржкржжрзНржзрждрж┐рждрзЗ рж╕рж╣ржЬрзЗржЗ рж╕рзНржЯрзНрж░рж┐ржВржХрзЗ Title Case-ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рж╛ ржпрж╛рзЯ! ЁЯФе
// рждрзБржорж┐ ржпржжрж┐ ржЖрж░ржУ ржХрзЛржирзЛ ржЕржкрзНржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи ржмрж╛ ржирждрзБржи ржкржжрзНржзрждрж┐ ржжрзЗржЦрждрзЗ ржЪрж╛ржУ, ржЬрж╛ржирж┐рзЯрзЗ ржжрж┐ржУ! ЁЯЪА








// You said:
// explain it to bangla and after provide a code 
// ChatGPT said:
// ржЪрж▓рзЛ, рж╕рзНржЯрзНрж░рж┐ржВржХрзЗ Title Case-ржП ржХржиржнрж╛рж░рзНржЯ ржХрж░рж╛ ржирж┐рзЯрзЗ ржмрж╛ржВрж▓рж╛рзЯ рж╕рж╣ржЬржнрж╛ржмрзЗ ржмрзБржЭрж┐! ЁЯЪА

// ЁЯЯа Title Case ржХрзА?
// Title Case ржорж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ рж╢ржмрзНржжрзЗрж░ ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ ржмржбрж╝ рж╣рж╛рждрзЗрж░ (Uppercase) рж╣ржмрзЗ, ржЖрж░ ржмрж╛ржХрж┐ ржЕржХрзНрж╖рж░ржЧрзБрж▓рзЛ ржЫрзЛржЯ рж╣рж╛рждрзЗрж░ (Lowercase) ржерж╛ржХржмрзЗред
// ржЙржжрж╛рж╣рж░ржг:

// kotlin
// Copy
// Edit
// hello world тЖТ Hello World  
// javascript is fun тЖТ Javascript Is Fun
// ЁЯза ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛:
// ЁЯЯв ржкржжрзНржзрждрж┐ рзз: Regex ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕ржорж╛ржзрж╛ржи
// javascript
// Copy
// Edit
// function toTitleCase(str) {
//   return str.replace(/\b\w/g, l => l.toUpperCase());
// }
// ЁЯСЙ ржПржЦрж╛ржирзЗ ржХрзА рж╣ржЪрзНржЫрзЗ:

// Regex (/\b\w/g) ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржЫрж┐:

// \b тЖТ Word Boundary (рж╢ржмрзНржжрзЗрж░ рж╢рзБрж░рзБ) ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗред

// \w тЖТ рж╢ржмрзНржжрзЗрж░ ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЗред

// g тЖТ ржЧрзНрж▓рзЛржмрж╛рж▓ ржлрзНрж▓рзНржпрж╛ржЧ, ржкрзБрж░рзЛ рж╕рзНржЯрзНрж░рж┐ржВрзЯрзЗ ржпржд ржорж┐рж▓рзЗ ржпрж╛рзЯ, рж╕ржмржХрж┐ржЫрзБ ржЪрзЗржХ ржХрж░рзЗред

// replace ржлрж╛ржВрж╢ржи:

// replace-ржПрж░ рж╕рж╛рж╣рж╛ржпрзНржпрзЗ ржкрзНрж░рждрж┐ржЯрж┐ рж╢ржмрзНржжрзЗрж░ ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ржХрзЗ toUpperCase() ржжрж┐рзЯрзЗ ржмрзЬ рж╣рж╛рждрзЗрж░ ржХрж░рзЗ ржжрж┐ржЪрзНржЫрж┐ред

// ЁЯЯа ржЙржжрж╛рж╣рж░ржг:
// javascript
// Copy
// Edit
// console.log(toTitleCase("hello world"));         // Hello World  
// console.log(toTitleCase("javascript is fun"));   // Javascript Is Fun  
// console.log(toTitleCase("make it title case!")); // Make It Title Case!
// ЁЯФ╕ ржЖржЙржЯржкрзБржЯ:

// vbnet
// Copy
// Edit
// Hello World  
// Javascript Is Fun  
// Make It Title Case!
// ЁЯЯв ржкржжрзНржзрждрж┐ рзи: Split, Map & Join ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕ржорж╛ржзрж╛ржи
// ржпржжрж┐ Regex ржПржХржЯрзБ ржХржарж┐ржи ржоржирзЗ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржЖржорж░рж╛ split тЖТ map тЖТ join ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рж┐! ЁЯСЗ

// javascript
// Copy
// Edit
// function toTitleCase(str) {
//   return str
//     .split(' ')                               // рж╕рзНржкрзЗрж╕ ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐ржЯрж┐ рж╢ржмрзНржж ржЖрж▓рж╛ржжрж╛ ржХрж░ржЫрж┐
//     .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ ржХрзНржпрж╛ржкрж┐ржЯрж╛рж▓, ржмрж╛ржХрж┐ ржЕржВрж╢ ржЖржЧрзЗрж░ ржорждрзЛ рж░рж╛ржЦржЫрж┐
//     .join(' ');                              // рж╕ржм рж╢ржмрзНржж ржЖржмрж╛рж░ ржПржХрж╕рж╛ржерзЗ ржЬрзЛрзЬрж╛ рж▓рж╛ржЧрж╛ржЪрзНржЫрж┐
// }
// ЁЯЯа ржЙржжрж╛рж╣рж░ржг:
// javascript
// Copy
// Edit
// console.log(toTitleCase("learning javascript is awesome")); // Learning Javascript Is Awesome  
// console.log(toTitleCase("this is a test case"));            // This Is A Test Case
// ЁЯФ╕ ржЖржЙржЯржкрзБржЯ:

// vbnet
// Copy
// Edit
// Learning Javascript Is Awesome  
// This Is A Test Case
// ЁЯУК ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐:
// ржЯрж╛ржЗржо ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐: O(N) тЖТ рж╕рзНржЯрзНрж░рж┐ржВрзЯрзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржЕржХрзНрж╖рж░ ржПржХржмрж╛рж░ ржХрж░рзЗ ржЪрзЗржХ ржХрж░ржЫрж┐ред

// рж╕рзНржкрзЗрж╕ ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐: O(N) тЖТ ржирждрзБржи рж╕рзНржЯрзНрж░рж┐ржВ рждрзИрж░рж┐ ржХрж░ржЫрж┐ (split & join-ржПрж░ ржХрж╛рж░ржгрзЗ)ред

// ЁЯЪА рж╕ржВржХрзНрж╖рзЗржкрзЗ:
// рждрзБржорж┐ ржЪрж╛ржЗрж▓рзЗ ржпрзЗржХрзЛржирзЛ ржкржжрзНржзрждрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЛ тАФ Regex ржмрж╛ Loopред

// Regex: ржХрзЛржб ржЫрзЛржЯ, ржХрж┐ржирзНрждрзБ ржирждрзБржиржжрзЗрж░ ржЬржирзНржп ржПржХржЯрзБ ржХржарж┐ржи рж╣рждрзЗ ржкрж╛рж░рзЗред

// Loop: ржкрзЬрждрзЗ рж╕рж╣ржЬ, ржПржХржЯрзБ ржмрзЗрж╢рж┐ рж▓рж╛ржЗржи ржХрзЛржб рж▓рж╛ржЧрзЗред

// рждрзЛржорж╛рж░ ржкржЫржирзНржж ржорждрзЛ ржпрзЗржЯрж╛ ржнрж╛рж▓рзЛ рж▓рж╛ржЧрзЗ, рж╕рзЗржЯрж╛ржЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЛ! ржпржжрж┐ ржЖрж░ржУ ржХрж┐ржЫрзБрж░ ржжрж░ржХрж╛рж░ рж╣рзЯ ржмрж╛ ржирждрзБржи ржХрзЛржирзЛ ржЕржкрж╢ржи ржжрзЗржЦрждрзЗ ржЪрж╛ржУ, ржЖржорж╛ржХрзЗ ржЬрж╛ржирж┐рзЯрзЗ ржжрж┐ржУ! ЁЯФе








// You said:
// here what is split work ? what is map work ? what is charAt(0) work? what is slice(1) work? what is join work ?
// explain it in bangla different way 
// ChatGPT said:
// рждрзБржорж┐ ржЕрж╕рж╛ржзрж╛рж░ржг ржкрзНрж░рж╢рзНржи ржХрж░рзЗржЫрзЛ! ЁЯза ржЪрж▓рзЛ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ split, map, charAt(0), slice(1), ржЖрж░ join ржХрзА ржХрж░рзЗ, рж╕рзЗржЧрзБрж▓рзЛ рж╕рж╣ржЬ ржмрж╛ржВрж▓рж╛рзЯ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж┐! ЁЯЪА

// ЁЯФ╕ 1. split() тАФ рж╕рзНржЯрзНрж░рж┐ржВ ржнрж╛ржЧ ржХрж░рж╛
// split ржорзЗржержб ржжрж┐рзЯрзЗ ржПржХржЯрж╛ рж╕рзНржЯрзНрж░рж┐ржВржХрзЗ ржЫрзЛржЯ ржЫрзЛржЯ ржЕржВрж╢рзЗ ржнрж╛ржЧ ржХрж░рзЗ ржЕрзНржпрж╛рж░рзЗ (array) ржмрж╛ржирж╛ржирзЛ ржпрж╛рзЯред

// javascript
// Copy
// Edit
// let str = "hello world";
// let words = str.split(' ');
// console.log(words);
// ЁЯФ╕ ржЖржЙржЯржкрзБржЯ:

// css
// Copy
// Edit
// ["hello", "world"]
// ЁЯСЙ ржмрзНржпрж╛ржЦрзНржпрж╛:

// ' ' (рж╕рзНржкрзЗрж╕) ржжрж┐рзЯрзЗ ржЖрж▓рж╛ржжрж╛ ржХрж░рж╛рж░ ржорж╛ржирзЗ, ржпрзЗржЦрж╛ржирзЗ ржпрзЗржЦрж╛ржирзЗ рж╕рзНржкрзЗрж╕ ржЖржЫрзЗ, рж╕рзЗржЦрж╛ржирзЗ ржнрзЗржЩрзЗ ржлрзЗрж▓ржмрзЗред

// ржлрж▓рзЗ, ржЖржорж╛ржжрзЗрж░ рж╕рзНржЯрзНрж░рж┐ржВ ржерзЗржХрзЗ ржЕрзНржпрж╛рж░рзЗ рждрзИрж░рж┐ рж╣ржмрзЗ, ржпрзЗржЦрж╛ржирзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржУрзЯрж╛рж░рзНржб ржЖрж▓рж╛ржжрж╛ ржПрж▓рж┐ржорзЗржирзНржЯ рж╣рж┐рж╕рзЗржмрзЗ ржерж╛ржХржмрзЗред

// ЁЯФ╕ 2. map() тАФ ржЕрзНржпрж╛рж░рзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржПрж▓рж┐ржорзЗржирзНржЯрзЗ ржХрж╛ржЬ ржХрж░рж╛
// map ржорзЗржержб ржжрж┐рзЯрзЗ ржЖржорж░рж╛ ржЕрзНржпрж╛рж░рзЗрж░ ржкрзНрж░рждрж┐ржЯрж┐ ржЖржЗржЯрзЗржорзЗрж░ ржЙржкрж░ ржПржХржЯрж╛ ржлрж╛ржВрж╢ржи ржЪрж╛рж▓рж╛рждрзЗ ржкрж╛рж░рж┐ред ржПржЯрж╛ ржирждрзБржи ржЕрзНржпрж╛рж░рзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред

// javascript
// Copy
// Edit
// let words = ["hello", "world"];
// let capitalizedWords = words.map(word => word.toUpperCase());
// console.log(capitalizedWords);
// ЁЯФ╕ ржЖржЙржЯржкрзБржЯ:

// css
// Copy
// Edit
// ["HELLO", "WORLD"]
// ЁЯСЙ ржмрзНржпрж╛ржЦрзНржпрж╛:

// map ржкрзНрж░рждрж┐ржЯрж┐ ржУрзЯрж╛рж░рзНржбрзЗрж░ ржЙржкрж░ рж▓рзБржк ржЪрж╛рж▓рж┐рзЯрзЗ toUpperCase ржжрж┐рзЯрзЗ ржмрзЬ рж╣рж╛рждрзЗрж░ ржХрж░рзЗ ржжрж┐ржЪрзНржЫрзЗред

// ржХрж┐ржирзНрждрзБ ржЖржорж╛ржжрзЗрж░ ржЯрж╛ржЗржЯрзЗрж▓ ржХрзЗрж╕рзЗрж░ ржЬржирзНржп рж╢рзБржзрзБ ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ ржмрзЬ ржХрж░рж╛ рж▓рж╛ржЧржмрзЗ тАФ рж╕рзЗржЯрж╛рж░ ржЬржирзНржп charAt ржЖрж░ slice ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЛред

// ЁЯФ╕ 3. charAt(0) тАФ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкржЬрж┐рж╢ржирзЗрж░ ржЕржХрзНрж╖рж░ ржмрзЗрж░ ржХрж░рж╛
// charAt ржжрж┐рзЯрзЗ рж╕рзНржЯрзНрж░рж┐ржВ-ржПрж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкржЬрж┐рж╢ржирзЗрж░ ржЕржХрзНрж╖рж░ ржмрзЗрж░ ржХрж░рж╛ ржпрж╛рзЯред

// javascript
// Copy
// Edit
// let word = "hello";
// console.log(word.charAt(0)); 
// ЁЯФ╕ ржЖржЙржЯржкрзБржЯ:

// nginx
// Copy
// Edit
// h
// ЁЯСЙ ржмрзНржпрж╛ржЦрзНржпрж╛:

// charAt(0) ржорж╛ржирзЗ рж╕рзНржЯрзНрж░рж┐ржВрзЯрзЗрж░ рзжрждржо ржкржЬрж┐рж╢ржирзЗрж░ (ржкрзНрж░ржержо) ржЕржХрзНрж╖рж░ред

// ржЖржорж░рж╛ ржПржЗ ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ржЯрж╛ржХрзЗ ржмрзЬ рж╣рж╛рждрзЗрж░ (uppercase) ржХрж░рждрзЗ ржЪрж╛ржЗред

// ЁЯФ╕ 4. slice(1) тАФ рж╕рзНржЯрзНрж░рж┐ржВрзЯрзЗрж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЕржВрж╢ ржХрж╛ржЯрж╛
// slice ржжрж┐рзЯрзЗ рж╕рзНржЯрзНрж░рж┐ржВрзЯрзЗрж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЕржВрж╢ ржХрзЗржЯрзЗ ржирж┐рзЯрзЗ ржЖрж╕рж╛ ржпрж╛рзЯред

// javascript
// Copy
// Edit
// let word = "hello";
// console.log(word.slice(1)); 
// ЁЯФ╕ ржЖржЙржЯржкрзБржЯ:

// nginx
// Copy
// Edit
// ello
// ЁЯСЙ ржмрзНржпрж╛ржЦрзНржпрж╛:

// slice(1) ржорж╛ржирзЗ рззржо ржкржЬрж┐рж╢ржи ржерзЗржХрзЗ рж╢рзЗрж╖ ржкрж░рзНржпржирзНржд ржпрж╛ ржЖржЫрзЗ, рждрж╛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред

// ржлрж▓рзЗ, ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ ржмрж╛ржж ржжрж┐рзЯрзЗ ржмрж╛ржХрж┐ ржЕржВрж╢ ржЪрж▓рзЗ ржЖрж╕ржмрзЗред

// ЁЯФ╕ 5. join() тАФ ржЕрзНржпрж╛рж░рзЗржХрзЗ рж╕рзНржЯрзНрж░рж┐ржВ ржмрж╛ржирж╛ржирзЛ
// join ржжрж┐рзЯрзЗ ржЕрзНржпрж╛рж░рзЗ-рж░ ржПрж▓рж┐ржорзЗржирзНржЯржЧрзБрж▓рзЛржХрзЗ ржПржХрж╕рж╛ржерзЗ ржЬрзЛрзЬрж╛ рж▓рж╛ржЧрж┐рзЯрзЗ рж╕рзНржЯрзНрж░рж┐ржВ ржмрж╛ржирж╛ржирзЛ ржпрж╛рзЯред

// javascript
// Copy
// Edit
// let words = ["Hello", "World"];
// let result = words.join(' ');
// console.log(result);
// ЁЯФ╕ ржЖржЙржЯржкрзБржЯ:

// nginx
// Copy
// Edit
// Hello World
// ЁЯСЙ ржмрзНржпрж╛ржЦрзНржпрж╛:

// join(' ') ржорж╛ржирзЗ рж╕рзНржкрзЗрж╕ ржжрж┐рзЯрзЗ ржЬрзЛрзЬрж╛ рж▓рж╛ржЧрж╛ржирзЛред

// ржпржжрж┐ ржХржорж╛ ржмрж╛ ржЕржирзНржп ржХрж┐ржЫрзБ ржжрж┐рждрзЗ ржЪрж╛ржУ, рж╕рзЗржЯрж╛ join-ржПрж░ ржоржзрзНржпрзЗ ржжрж┐рждрзЗ ржкрж╛рж░рзЛред

// ЁЯОп ржлрж╛ржЗржирж╛рж▓ ржХрзЛржб:
// ржПржЦржи ржкрзБрж░рзЛ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ржЯрж╛ ржПржХрж╕рж╛ржерзЗ ржжрзЗржЦрж┐!

// javascript
// Copy
// Edit
// function toTitleCase(str) {
//   return str
//     .split(' ')                                 // рж╕рзНржЯрзНрж░рж┐ржВржХрзЗ рж╕рзНржкрзЗрж╕ ржжрж┐рзЯрзЗ ржнрж╛ржЧ ржХрж░ржЫрж┐
//     .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ ржмрзЬ, ржмрж╛ржХрж┐ ржЕржВрж╢ ржЖржЧрзЗрж░ ржорждрзЛ рж░рж╛ржЦржЫрж┐
//     .join(' ');                                // рж╕рзНржкрзЗрж╕ ржжрж┐рзЯрзЗ рж╕ржм ржУрзЯрж╛рж░рзНржб ржЬрзЛрзЬрж╛ рж▓рж╛ржЧрж╛ржЪрзНржЫрж┐
// }

// // ЁЯЯв **ржЯрзЗрж╕рзНржЯ ржХрзЗрж╕:**  
// console.log(toTitleCase("hello world"));          // Hello World  
// console.log(toTitleCase("javascript is awesome")); // Javascript Is Awesome  
// console.log(toTitleCase("this is a test case"));   // This Is A Test Case
// ЁЯФ╕ ржЖржЙржЯржкрзБржЯ:

// vbnet
// Copy
// Edit
// Hello World  
// Javascript Is Awesome  
// This Is A Test Case
// ЁЯЪА ржкрзБрж░рзЛ ржкрзНрж░рж╕рзЗрж╕:
// split: рж╕рзНржЯрзНрж░рж┐ржВржХрзЗ рж╕рзНржкрзЗрж╕ ржжрж┐рзЯрзЗ ржнрж╛ржЧ ржХрж░рж╛

// map: ржкрзНрж░рждрж┐ржЯрж┐ ржУрзЯрж╛рж░рзНржбрзЗрж░ ржЙржкрж░ ржлрж╛ржВрж╢ржи ржЪрж╛рж▓рж╛ржирзЛ

// charAt(0): ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ ржирзЗржУрзЯрж╛

// toUpperCase: ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ржХрзЗ ржмрзЬ рж╣рж╛рждрзЗрж░ ржХрж░рж╛

// slice(1): ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ ржмрж╛ржж ржжрж┐рзЯрзЗ ржмрж╛ржХрж┐ ржЕржВрж╢ рж░рж╛ржЦрж╛

// join: рж╕ржм ржУрзЯрж╛рж░рзНржб ржЖржмрж╛рж░ ржЬрзЛрзЬрж╛ рж▓рж╛ржЧрж╛ржирзЛ

// ржПржнрж╛ржмрзЗржЗ рж╕рж╣ржЬрзЗ ржПржХржЯрж╛ рж╕рзНржЯрзНрж░рж┐ржВржХрзЗ Title Case-ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рж╛ ржпрж╛рзЯ! ЁЯФе
// рждрзБржорж┐ ржпржжрж┐ ржЖрж░ржУ ржмрзНржпрж╛ржЦрзНржпрж╛ ржЪрж╛ржУ ржмрж╛ ржЕржирзНржпржнрж╛ржмрзЗ ржХрж░рждрзЗ ржЪрж╛ржУ, ржмрж▓рзЛ! ржЖржорж┐ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рж╛рж░ ржЬржирзНржп ржЖржЫрж┐! тЬМя╕П








// You said:
// 2. Write a function that takes an array of objects and a key, and returns a new array sorted based on the values of that key in ascending order. 

// By asking this question, hiring managers analyze how well the candidate can discuss the sorting algorithm and its time complexity. ItтАЩs also crucial for candidates to demonstrate their codeтАЩs robustness. 

// The following function takes an array of objects and a key to sort the array based on the values in ascending order. 

// function sortByKey(arr, key) { 

//   return arr.sort((a, b) => a[key] тАУ b[key]); 

// } 

// explain it to bangla and after provide a code 
// ChatGPT said:
// ЁЯФ╣ ржПржХржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржЕрзНржпрж╛рж░рзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрзА ржЕржирзБрж╕рж╛рж░рзЗ ржЫрзЛржЯ ржерзЗржХрзЗ ржмрзЬ рж╕рж╛ржЬрж╛ржирзЛ (Sorting)
// ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржПржХржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржЕрзНржпрж╛рж░рзЗ (array of objects) ржПржмржВ ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрзА (key) ржирзЗрзЯред рждрж╛рж░ржкрж░, рж╕рзЗржЗ key-ржПрж░ ржорж╛ржи ржЕржирзБржпрж╛рзЯрзА ржЕрзНржпрж╛рж░рзЗржЯрж┐ржХрзЗ ржЫрзЛржЯ ржерзЗржХрзЗ ржмрзЬ (ascending order) рж╕рж╛ржЬрж┐рзЯрзЗ ржжрзЗрзЯред

// ЁЯОп ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛:
// ржЖржорж░рж╛ sort ржорзЗржержб ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЛ

// sort() рж╣рж▓рзЛ ржЬрж╛ржнрж╛рж╕рзНржХрзНрж░рж┐ржкрзНржЯрзЗрж░ ржПржХржЯрж┐ ржмрж┐рж▓рзНржЯ-ржЗржи ржорзЗржержб, ржпрж╛ ржЕрзНржпрж╛рж░рзЗрж░ ржЙржкрж╛ржжрж╛ржиржЧрзБрж▓рзЛ рж╕рж╛ржЬрж╛рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗред

// ржбрж┐ржлрж▓рзНржЯржнрж╛ржмрзЗ sort() рж╕рзНржЯрзНрж░рж┐ржВ рж╣рж┐рж╕рзЗржмрзЗ ржХржорзНржкрзЗрзЯрж╛рж░ ржХрж░рзЗред ржХрж┐ржирзНрждрзБ, рж╕ржВржЦрзНржпрж╛ (numbers) ржмрж╛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкрзНрж░рзЛржкрж╛рж░рзНржЯрж┐ ржЕржирзБрж╕рж╛рж░рзЗ рж╕рж╛ржЬрж╛рждрзЗ ржЪрж╛ржЗрж▓рзЗ ржХржорзНржкрзЗрзЯрж╛рж░ ржлрж╛ржВрж╢ржи ржжрж┐рждрзЗ рж╣рзЯред

// ржХржорзНржкрзЗрзЯрж╛рж░ ржлрж╛ржВрж╢ржи рждрзИрж░рж┐ ржХрж░ржмрзЛ:

// (a, b) => a[key] - b[key] ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржжрзБржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ key-ржПрж░ ржорж╛ржирзЗрж░ ржоржзрзНржпрзЗ ржкрж╛рж░рзНржержХрзНржп ржмрзЗрж░ ржХрж░рзЗред

// ржпржжрж┐ a[key] ржЫрзЛржЯ рж╣рзЯ b[key] ржерзЗржХрзЗ, рждрж╛рж╣рж▓рзЗ ржирж┐ржЪрзЗ ржЪрж▓рзЗ ржЖрж╕ржмрзЗред

// ржпржжрж┐ a[key] ржмрзЬ рж╣рзЯ b[key] ржерзЗржХрзЗ, рждрж╛рж╣рж▓рзЗ ржЙржкрж░рзЗ ржЪрж▓рзЗ ржЖрж╕ржмрзЗред

// ЁЯзСтАНЁЯТ╗ ржХрзЛржб:
// javascript
// Copy
// Edit
// function sortByKey(arr, key) {
//   return arr.sort((a, b) => a[key] - b[key]);
// }

// // ЁЯЯв **ржЯрзЗрж╕рзНржЯ ржХрзЗрж╕:**  
// const people = [
//   { name: "John", age: 25 },
//   { name: "Alice", age: 30 },
//   { name: "Bob", age: 20 }
// ];

// console.log(sortByKey(people, "age"));
// ЁЯЯа ржЖржЙржЯржкрзБржЯ:
// javascript
// Copy
// Edit
// [
//   { name: "Bob", age: 20 },
//   { name: "John", age: 25 },
//   { name: "Alice", age: 30 }
// ]
// ЁЯСЙ age (ржмрзЯрж╕) ржЕржирзБрж╕рж╛рж░рзЗ ржЫрзЛржЯ ржерзЗржХрзЗ ржмрзЬ рж╕рж╛ржЬрж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ!

// ЁЯФН ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗ?
// ржкрзНрж░ржержорзЗ ржЕрзНржпрж╛рж░рзЗ:

// js
// Copy
// Edit
// [
//   { name: "John", age: 25 },
//   { name: "Alice", age: 30 },
//   { name: "Bob", age: 20 }
// ]
// sort() ржХржорзНржкрзЗрзЯрж╛рж░ ржХрж░рзЗ:

// 25 - 30 = -5 тЖТ John < Alice (ржарж┐ржХ ржЖржЫрзЗ)

// 25 - 20 = 5 тЖТ John > Bob (ржмржжрж▓рж╛ржмрзЗ)

// 30 - 20 = 10 тЖТ Alice > Bob (ржмржжрж▓рж╛ржмрзЗ)

// рж╢рзЗрж╖рзЗ рж╕рж╛ржЬрж╛ржирзЛ ржЕрзНржпрж╛рж░рзЗ:

// js
// Copy
// Edit
// [
//   { name: "Bob", age: 20 },
//   { name: "John", age: 25 },
//   { name: "Alice", age: 30 }
// ]
// ЁЯЯв ржЕржирзНржп ржХрзА ржЕржирзБрж╕рж╛рж░рзЗ рж╕рж╛ржЬрж╛ржирзЛ ржпрж╛ржХ!
// ржЖржорж░рж╛ ржпржжрж┐ name ржЕржирзБрж╕рж╛рж░рзЗ рж╕рж╛ржЬрж╛рждрзЗ ржЪрж╛ржЗ, рждрж╛рж╣рж▓рзЗ?

// javascript
// Copy
// Edit
// console.log(sortByKey(people, "name"));
// ржЖржЙржЯржкрзБржЯ:
// javascript
// Copy
// Edit
// [
//   { name: "Alice", age: 30 },
//   { name: "Bob", age: 20 },
//   { name: "John", age: 25 }
// ]
// ЁЯСЙ Alphabetically рж╕рж╛ржЬрж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ! (A тЖТ B тЖТ J)

// тЪб Descending Order (ржмрзЬ ржерзЗржХрзЗ ржЫрзЛржЯ)
// ржЙрж▓рзНржЯрзЛржнрж╛ржмрзЗ ржмрзЬ ржерзЗржХрзЗ ржЫрзЛржЯ рж╕рж╛ржЬрж╛рждрзЗ ржЪрж╛ржЗрж▓рзЗ (-) рж╕рж╛ржЗржи ржкрж░рж┐ржмрж░рзНрждржи ржХрж░ржмрзЛ!

// javascript
// Copy
// Edit
// function sortByKeyDescending(arr, key) {
//   return arr.sort((a, b) => b[key] - a[key]);
// }
// console.log(sortByKeyDescending(people, "age"));
// ржЖржЙржЯржкрзБржЯ:
// javascript
// Copy
// Edit
// [
//   { name: "Alice", age: 30 },
//   { name: "John", age: 25 },
//   { name: "Bob", age: 20 }
// ]
// ЁЯСЙ ржмрзЬ ржерзЗржХрзЗ ржЫрзЛржЯ рж╕рж╛ржЬрж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ!

// ЁЯХ╡я╕ПтАНтЩВя╕П ржЯрж╛ржЗржо ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐:
// ЁЯСЙ sort() ржПрж░ ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐ O(N log N), ржХрж╛рж░ржг ржПржЯрж┐ QuickSort / MergeSort ржмрзНржпрж╛ржмрж╣рж╛рж░ ржХрж░рзЗред

// ЁЯЪА рж╕ржВржХрзНрж╖рзЗржкрзЗ:
// Ascending Order: (a, b) => a[key] - b[key]

// Descending Order: (a, b) => b[key] - a[key]

// Alphabetically Sort (рж╕рзНржЯрзНрж░рж┐ржВ-ржПрж░ ржЬржирзНржп)

// js
// Copy
// Edit
// (a, b) => a[key].localeCompare(b[key])
// ржЯрж╛ржЗржо ржХржоржкрзНрж▓рзЗржХрзНрж╕рж┐ржЯрж┐: O(N log N)

// ржПржнрж╛ржмрзЗржЗ рждрзБржорж┐ ржХрзЛржирзЛ ржЕрзНржпрж╛рж░рзЗ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрзА ржЕржирзБрж╕рж╛рж░рзЗ рж╕рж╛ржЬрж╛рждрзЗ ржкрж╛рж░ржмрзЗ! ЁЯФе
// ржХрзЛржирзЛ ржХржиржлрж┐ржЙрж╢ржи ржерж╛ржХрж▓рзЗ ржЬрж╛ржирж╛ржУ! ЁЯШК ЁЯЪА








// You said:
// console.log(sortByKey(people, "age"));
// why age is including string
// ChatGPT said:
// ржнрж╛рж▓рзЛ ржкрзНрж░рж╢рзНржи! ЁЯдФ sortByKey(people, "age")-ржП age ржХрзАржнрж╛ржмрзЗ рж╕рзНржЯрзНрж░рж┐ржВ рж╣ржЪрзНржЫрзЗ?

// ЁЯФ╣ ржкрзНрж░ржержорзЗ ржмрзБржЭрж┐ ржХрзА рж╣ржЪрзНржЫрзЗ:
// javascript
// Copy
// Edit
// function sortByKey(arr, key) {
//   return arr.sort((a, b) => a[key] - b[key]);
// }
// ржПржЦрж╛ржирзЗ a[key] ржПржмржВ b[key] рж╣рж▓ age ржкрзНрж░ржкрж╛рж░рзНржЯрж┐рж░ ржорж╛ржиред

// ржпржжрж┐ age-ржПрж░ ржорж╛ржи рж╕ржВржЦрзНржпрж╛ (number) рж╣рзЯ, рждрж╛рж╣рж▓рзЗ - ржЕржкрж╛рж░рзЗржЯрж░ ржарж┐ржХржарж╛ржХ ржХрж╛ржЬ ржХрж░ржмрзЗ, ржХрж╛рж░ржг ржПржЯрж┐ рж╕ржВржЦрзНржпрж╛ (number) ржЧрж╛ржгрж┐рждрж┐ржХржнрж╛ржмрзЗ рждрзБрж▓ржирж╛ ржХрж░рзЗред

// ржХрж┐ржирзНрждрзБ ржпржжрж┐ age ржХрзЛржирзЛ ржХрж╛рж░ржгрзЗ string рж╣рзЯ, рждрж╛рж╣рж▓рзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржмрзЗ!

// ЁЯФе рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорзНржнрж╛ржмрзНржп ржХрж╛рж░ржг:
// ЁЯФ╣ 1. JSON ржмрж╛ ржбрж╛ржЯрж╛ рж╕рзЛрж░рзНрж╕рзЗ age рж╣рзЯрждрзЛ рж╕рзНржЯрзНрж░рж┐ржВ ржЖржХрж╛рж░рзЗ ржЖржЫрзЗ!
// javascript
// Copy
// Edit
// const people = [
//   { name: "John", age: "25" },  // ржПржЦрж╛ржирзЗ "25" рж╕рзНржЯрзНрж░рж┐ржВ
//   { name: "Alice", age: "30" }, // ржПржЦрж╛ржирзЗ "30" рж╕рзНржЯрзНрж░рж┐ржВ
//   { name: "Bob", age: "20" }    // ржПржЦрж╛ржирзЗ "20" рж╕рзНржЯрзНрж░рж┐ржВ
// ];
// ЁЯСЙ ржПржЦрж╛ржирзЗ age рж╕ржВржЦрзНржпрж╛ (number) ржирзЯ, ржмрж░ржВ рж╕рзНржЯрзНрж░рж┐ржВ (string)
// ЁЯСЙ "25" - "30" ржХрж░рж▓рзЗ ржЬрж╛ржнрж╛рж╕рзНржХрзНрж░рж┐ржкрзНржЯ ржПржЯрж╛ржХрзЗ number-ржП ржХржиржнрж╛рж░рзНржЯ ржХрж░ржмрзЗ, ржХрж┐ржирзНрждрзБ ржнрж╛рж▓рзЛ ржЕржнрзНржпрж╛рж╕ ржирзЯ!

// ЁЯФ╣ 2. ржбрж╛ржЯрж╛ JSON ржерзЗржХрзЗ ржПрж▓рзЗ рж╕ржм рж╕рзНржЯрзНрж░рж┐ржВ рж╣рждрзЗ ржкрж╛рж░рзЗ!
// ржпржжрж┐ рждрзБржорж┐ JSON API ржерзЗржХрзЗ ржбрж╛ржЯрж╛ ржлрзЗржЪ ржХрж░рзЛ, рждрж╛рж╣рж▓рзЗ рж╕ржм ржнрзНржпрж╛рж▓рзБ рж╕рзНржЯрзНрж░рж┐ржВ ржЖржХрж╛рж░рзЗ ржЖрж╕рждрзЗ ржкрж╛рж░рзЗред

// json
// Copy
// Edit
// [
//   { "name": "John", "age": "25" },
//   { "name": "Alice", "age": "30" },
//   { "name": "Bob", "age": "20" }
// ]
// ЁЯСЙ ржПржЦрж╛ржирзЗ age рж╕ржмрж╕ржорзЯ рж╕рзНржЯрзНрж░рж┐ржВ, рждрж╛ржЗ sort ржХрж╛ржЬ ржХрж░ржмрзЗ ржирж╛ ржарж┐ржХржорждрзЛ!

// тЬЕ рж╕ржорж╛ржзрж╛ржи: Number()-ржП ржХржиржнрж╛рж░рзНржЯ ржХрж░рж╛
// ЁЯЯв рж╢рзБржзрзБ Number() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗржЗ ржарж┐ржХ рж╣рзЯрзЗ ржпрж╛ржмрзЗ!
// javascript
// Copy
// Edit
// function sortByKey(arr, key) {
//   return arr.sort((a, b) => Number(a[key]) - Number(b[key]));
// }
// ЁЯСЙ ржПрждрзЗ age ржпржжрж┐ рж╕рзНржЯрзНрж░рж┐ржВ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ Number() рж╕рзЗржЯрж╛ржХрзЗ ржирж╛ржорзНржмрж╛рж░рзЗ ржХржиржнрж╛рж░рзНржЯ ржХрж░ржмрзЗред

// ЁЯЫа ржлрж╛ржЗржирж╛рж▓ ржХрж╛ржЬрзЗрж░ ржХрзЛржб:
// javascript
// Copy
// Edit
// const people = [
//   { name: "John", age: "25" },  // рж╕рзНржЯрзНрж░рж┐ржВ рж╣рж┐рж╕рж╛ржмрзЗ ржЖржЫрзЗ
//   { name: "Alice", age: "30" },
//   { name: "Bob", age: "20" }
// ];

// function sortByKey(arr, key) {
//   return arr.sort((a, b) => Number(a[key]) - Number(b[key]));
// }

// console.log(sortByKey(people, "age"));
// ЁЯФ╕ ржЖржЙржЯржкрзБржЯ:
// javascript
// Copy
// Edit
// [
//   { name: "Bob", age: "20" },
//   { name: "John", age: "25" },
//   { name: "Alice", age: "30" }
// ]
// ЁЯСЙ ржПржЦржи ржарж┐ржХржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗ! ЁЯФе

// ЁЯФН рж╕ржВржХрзНрж╖рзЗржкрзЗ:
// рж╕ржорж╕рзНржпрж╛: age рж╕рзНржЯрзНрж░рж┐ржВ рж╣рждрзЗ ржкрж╛рж░рзЗ, рждрж╛ржЗ ржЧрж╛ржгрж┐рждрж┐ржХ - ржЕржкрж╛рж░рзЗржЯрж░ рж╕ржарж┐ржХржнрж╛ржмрзЗ ржХрж╛ржЬ ржирж╛ржУ ржХрж░рждрзЗ ржкрж╛рж░рзЗред

// рж╕ржорж╛ржзрж╛ржи: Number() ржжрж┐рзЯрзЗ ржХржиржнрж╛рж░рзНржЯ ржХрж░рзЗ ржирзЗржУрзЯрж╛:

// js
// Copy
// Edit
// Number(a[key]) - Number(b[key])
// ржПржЯрж┐ ржЬрж╛ржнрж╛рж╕рзНржХрзНрж░рж┐ржкрзНржЯрзЗ ржбрж╛ржЯрж╛ рж╕рзЛрж░рзНрж╕рзЗрж░ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржЕржирзБржпрж╛рзЯрзА ржкрзНрж░рзЯрзЛржЬржи рж╣рждрзЗ ржкрж╛рж░рзЗ, ржмрж┐рж╢рзЗрж╖ ржХрж░рзЗ ржпржжрж┐ ржбрж╛ржЯрж╛ API ржерзЗржХрзЗ ржЖрж╕рзЗред

// ржПржЦржи рждрзБржорж┐ age ржмрж╛ ржЕржирзНржп ржпрзЗржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛рж░ ржорж╛ржи ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржпржнрж╛ржмрзЗ рж╕рж╛ржЬрж╛рждрзЗ ржкрж╛рж░ржмрзЗ! ЁЯЪА
// ржзржирзНржпржмрж╛ржж рж╕рзБржирзНржжрж░ ржкрзНрж░рж╢рзНржи ржХрж░рж╛рж░ ржЬржирзНржп! ЁЯШКтЬи








// You said:
//  return arr.sort((a,b) =>{a[key] - b[key]})
// explain it 
// ChatGPT said:
// рждрзБржорж┐ ржпрзЗ return arr.sort((a, b) => {a[key] - b[key]}) рж▓рж┐ржЦрзЗржЫрзЛ, рж╕рзЗржЯрж╛рждрзЗ ржПржХржЯрж╛ ржЫрзЛржЯ ржнрзБрж▓ ржЖржЫрзЗ, ржпрж╛ ржирж┐рзЯрзЗ ржХржерж╛ ржмрж▓ржмрзЛ!

// рждржмрзЗ, ржЖржЧрзЗ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржПржЯрж╛рж░ ржХрж╛ржЬ ржХрзАржнрж╛ржмрзЗ ржХрж░рзЗ рждрж╛ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж┐! ЁЯЪА

// ЁЯФ╣ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛
// 1я╕ПтГг sort() ржХрзА ржХрж╛ржЬ ржХрж░рзЗ?
// ЁЯСЙ sort() рж╣рж▓рзЛ JavaScript-ржПрж░ ржмрж┐рж▓рзНржЯ-ржЗржи ржорзЗржержб, ржпрж╛ ржЕрзНржпрж╛рж░рзЗрж░ ржнрзЗрждрж░рзЗрж░ ржЙржкрж╛ржжрж╛ржиржЧрзБрж▓рзЛ рж╕рж╛ржЬрж┐рзЯрзЗ ржжрзЗрзЯред

// ржбрж┐ржлрж▓рзНржЯржнрж╛ржмрзЗ, ржПржЯрж┐ рж╕рзНржЯрзНрж░рж┐ржВ рж╣рж┐рж╕рзЗржмрзЗ ржХржорзНржкрзЗрзЯрж╛рж░ ржХрж░рзЗ, ржХрж┐ржирзНрждрзБ ржЖржорж░рж╛ ржпржжрж┐ рж╕ржВржЦрзНржпрж╛ ржЕржирзБржпрж╛рзЯрзА рж╕рж╛ржЬрж╛рждрзЗ ржЪрж╛ржЗ, рждрж╛рж╣рж▓рзЗ ржЖржорж╛ржжрзЗрж░ ржПржХржЯрж╛ ржХржорзНржкрзЗрзЯрж╛рж░ ржлрж╛ржВрж╢ржи ржжрж┐рждрзЗ рж╣рзЯред

// 2я╕ПтГг (a, b) => a[key] - b[key] ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ?
// ЁЯСЙ ржПржЯрж┐ sort() ржорзЗржержбрзЗрж░ ржХржорзНржкрзЗрзЯрж╛рж░ ржлрж╛ржВрж╢ржиред
// ЁЯСЙ a ржПржмржВ b рж╣рж▓ ржЕрзНржпрж╛рж░рзЗрж░ ржжрзБржЯрж┐ ржЙржкрж╛ржжрж╛ржи, ржПржмржВ ржЖржорж░рж╛ рждрж╛ржжрзЗрж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ key ржЕржирзБржпрж╛рзЯрзА рждрзБрж▓ржирж╛ ржХрж░рж┐ред

// 3я╕ПтГг ржХржорзНржкрзЗрзЯрж╛рж░ ржлрж╛ржВрж╢ржирзЗрж░ рж▓ржЬрж┐ржХ:
// ЁЯСЙ a[key] - b[key] ржЖрж╕рж▓рзЗ рждрж┐ржиржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЗ:

// ржпржжрж┐ a[key] < b[key] рж╣рзЯ, рждрж╛рж╣рж▓рзЗ

// js
// Copy
// Edit
// a[key] - b[key] < 0  // ржЕрж░рзНржерж╛рзО ржирзЗржЧрзЗржЯрж┐ржн рж╕ржВржЦрзНржпрж╛
// ржорж╛ржирзЗ a-ржХрзЗ ржЖржЧрзЗ рж░рж╛ржЦржмрзЗ, b-ржХрзЗ ржкрж░рзЗред

// ржЕрж░рзНржерж╛рзО ржЫрзЛржЯ ржерзЗржХрзЗ ржмрзЬ рж╕рж╛ржЬрж╛ржирзЛрж░ ржЬржирзНржп ржарж┐ржХ ржЖржЫрзЗ! тЬЕ

// ржпржжрж┐ a[key] > b[key] рж╣рзЯ, рждрж╛рж╣рж▓рзЗ

// js
// Copy
// Edit
// a[key] - b[key] > 0  // ржЕрж░рзНржерж╛рзО ржкржЬрж┐ржЯрж┐ржн рж╕ржВржЦрзНржпрж╛
// ржорж╛ржирзЗ b-ржХрзЗ ржЖржЧрзЗ рж░рж╛ржЦржмрзЗ, a-ржХрзЗ ржкрж░рзЗред

// ржЕрж░рзНржерж╛рзО рж╕ржарж┐ржХржнрж╛ржмрзЗ рж╕рж╛ржЬрж╛ржмрзЗ! тЬЕ

// ржпржжрж┐ a[key] === b[key] рж╣рзЯ, рждрж╛рж╣рж▓рзЗ

// js
// Copy
// Edit
// a[key] - b[key] === 0
// ржорж╛ржирзЗ ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржи рж▓рж╛ржЧржмрзЗ ржирж╛, ржХрж╛рж░ржг рждрж╛рж░рж╛ рж╕ржорж╛ржиред

// ЁЯФ┤ рждрзБржорж┐ ржпрзЗ ржнрзБрж▓ ржХрж░рзЗржЫрзЛ!
// рждрзБржорж┐ рж▓рж┐ржЦрзЗржЫрзЛ:

// js
// Copy
// Edit
// return arr.sort((a, b) => { a[key] - b[key] })
// тЪая╕П ржПржЦрж╛ржирзЗ {} ржерж╛ржХрж╛рж░ ржХрж╛рж░ржгрзЗ JavaScript ржзрж░рзЗ ржирж┐ржЪрзНржЫрзЗ, рждрзБржорж┐ ржмрзНрж▓ржХ {} ржЦрзБрж▓рзЗржЫрзЛ ржХрж┐ржирзНрждрзБ ржХрж┐ржЫрзБ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржЫрзЛ ржирж╛ред ржлрж▓рзЗ undefined рж░рж┐ржЯрж╛рж░рзНржи рж╣ржЪрзНржЫрзЗред

// тЬЕ рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрждрзЗ рж╣ржмрзЗ:

// js
// Copy
// Edit
// return arr.sort((a, b) => a[key] - b[key]);
// ржПржЦрж╛ржирзЗ {} ржирж╛ ржерж╛ржХрж╛рзЯ, ржПржЯрж┐ рж╕рж░рж╛рж╕рж░рж┐ a[key] - b[key] рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред

// ЁЯОп рж╕ржарж┐ржХ ржХрзЛржб:
// javascript
// Copy
// Edit
// function sortByKey(arr, key) {
//   return arr.sort((a, b) => a[key] - b[key]);
// }

// // ЁЯЯв **ржЯрзЗрж╕рзНржЯ ржХрзЗрж╕:**  
// const people = [
//   { name: "John", age: 25 },
//   { name: "Alice", age: 30 },
//   { name: "Bob", age: 20 }
// ];

// console.log(sortByKey(people, "age"));
// ЁЯФ╣ ржЖржЙржЯржкрзБржЯ:

// js
// Copy
// Edit
// [
//   { name: "Bob", age: 20 },
//   { name: "John", age: 25 },
//   { name: "Alice", age: 30 }
// ]
// ЁЯСЙ ржПржЦржи ржПржЯрж┐ рж╕ржВржЦрзНржпрж╛ ржЕржирзБржпрж╛рзЯрзА рж╕рж╛ржЬрж┐рзЯрзЗ ржжрзЗржмрзЗ! ЁЯФе

// ЁЯФН рж╕ржВржХрзНрж╖рзЗржкрзЗ:
// 1я╕ПтГг sort() ржЕрзНржпрж╛рж░рзЗрж░ ржЙржкрж╛ржжрж╛ржи рж╕рж╛ржЬрж╛ржирзЛрж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯред
// 2я╕ПтГг a[key] - b[key] ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ, рж╕ржВржЦрзНржпрж╛ржЧрзБрж▓рзЛ ржЫрзЛржЯ ржерзЗржХрзЗ ржмрзЬ (ascending) рж╕рж╛ржЬрж╛ржирзЛ ржпрж╛рзЯред
// 3я╕ПтГг {} ржмрзНрж▓ржХ ржжрж┐рж▓рзЗ ржЕржмрж╢рзНржпржЗ return рж▓рж┐ржЦрждрзЗ рж╣ржмрзЗред ржирж╛ рж╣рж▓рзЗ undefined рж╣рзЯрзЗ ржпрж╛ржмрзЗ!
// 4я╕ПтГг рж╕ржарж┐ржХ рж╕рж┐ржиржЯрзНржпрж╛ржХрзНрж╕:

// js
// Copy
// Edit
// return arr.sort((a, b) => a[key] - b[key]);
// 5я╕ПтГг Descending (ржмрзЬ ржерзЗржХрзЗ ржЫрзЛржЯ) ржЪрж╛ржЗрж▓рзЗ:

// js
// Copy
// Edit
// return arr.sort((a, b) => b[key] - a[key]);
// ржПржЦржи рждрзЛржорж╛рж░ рж╕ржм ржХрзНрж▓рж┐рзЯрж╛рж░ рж╣рзЯрзЗ ржЧрзЗржЫрзЗ! ЁЯШГ ЁЯОп
// // ржЖрж░ржУ ржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржерж╛ржХрж▓рзЗ ржЬрж╛ржирж╛ржУ! ЁЯЪАЁЯФе